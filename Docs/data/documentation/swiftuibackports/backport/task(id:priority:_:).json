{"kind":"symbol","abstract":[{"type":"text","text":"Adds a task to perform when this view appears or when a specified"},{"text":" ","type":"text"},{"type":"text","text":"value changes."}],"identifier":{"url":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/task(id:priority:_:)","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"SwiftUIBackports","relatedModules":["SwiftBackports"]}],"roleHeading":"Instance Method","extendedModule":"SwiftBackports","platforms":[],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Wrapped","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","title":"task(id:priority:_:)","symbolKind":"method","externalID":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE4task2id8priority_Qrqd___ScPyyYaYbctSQRd__lF","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"task","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"id"},{"text":": ","kind":"text"},{"text":"T","preciseIdentifier":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE4task2id8priority_Qrqd___ScPyyYaYbctSQRd__lFQO1Tqd__mfp","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"preciseIdentifier":"s:ScP","text":"TaskPriority","kind":"typeIdentifier"},{"text":", () ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"}]},"variants":[{"paths":["\/documentation\/swiftuibackports\/backport\/task(id:priority:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"@","kind":"attribute"},{"preciseIdentifier":"s:7SwiftUI11ViewBuilderV","kind":"attribute","text":"ViewBuilder"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"task"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"id"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE4task2id8priority_Qrqd___ScPyyYaYbctSQRd__lFQO1Tqd__mfp"},{"kind":"text","text":", "},{"text":"priority","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"kind":"text","text":" = .userInitiated, "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"action","kind":"internalParam"},{"kind":"text","text":": "},{"text":"@escaping","kind":"attribute"},{"kind":"text","text":" () "},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:SQ","text":"Equatable","kind":"typeIdentifier"},{"text":"\n","kind":"text"}]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The value to observe for changes. The value must conform","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":" protocol.","type":"text"}]}],"name":"id"},{"name":"priority","content":[{"inlineContent":[{"text":"The task priority to use when creating the asynchronous","type":"text"},{"type":"text","text":" "},{"type":"text","text":"task. The default priority is "},{"type":"codeVoice","code":".userInitiated"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"A closure that SwiftUI calls as an asynchronous task","type":"text"},{"type":"text","text":" "},{"text":"when the view appears. SwiftUI automatically cancels the task","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if the view disappears before the action completes. If the"},{"type":"text","text":" "},{"code":"id","type":"codeVoice"},{"text":" value changes, SwiftUI cancels and restarts the task.","type":"text"}],"type":"paragraph"}],"name":"action"}],"kind":"parameters"},{"content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"inlineContent":[{"type":"text","text":"A view that runs the specified action asynchronously when"},{"type":"text","text":" "},{"type":"text","text":"the view appears, or restarts the task with the "},{"code":"id","type":"codeVoice"},{"text":" value changes.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This method behaves like ","type":"text"},{"type":"codeVoice","code":"View\/task(priority:_:)"},{"type":"text","text":", except that it also"},{"text":" ","type":"text"},{"type":"text","text":"cancels and recreates the task when a specified value changes. To detect"},{"text":" ","type":"text"},{"text":"a change, the modifier tests whether a new value for the ","type":"text"},{"code":"id","type":"codeVoice"},{"type":"text","text":" parameter"},{"text":" ","type":"text"},{"type":"text","text":"equals the previous value. For this to work,"},{"type":"text","text":" "},{"text":"the value’s type must conform to the ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" protocol."}]},{"inlineContent":[{"text":"For example, if you define an equatable ","type":"text"},{"code":"Server","type":"codeVoice"},{"type":"text","text":" type that posts custom"},{"type":"text","text":" "},{"text":"notifications whenever its state changes — for example, from ","type":"text"},{"inlineContent":[{"type":"text","text":"signed"},{"type":"text","text":" "},{"type":"text","text":"out"}],"type":"emphasis"},{"type":"text","text":" to "},{"inlineContent":[{"type":"text","text":"signed in"}],"type":"emphasis"},{"type":"text","text":" — you can use the task modifier to update"},{"text":" ","type":"text"},{"text":"the contents of a ","type":"text"},{"type":"codeVoice","code":"Text"},{"text":" view to reflect the state of the","type":"text"},{"text":" ","type":"text"},{"text":"currently selected server:","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["Text(status ?? \"Signed Out\")","    .task(id: server) {","        let sequence = NotificationCenter.default.notifications(","            named: .didChangeStatus,","            object: server)","        for try await notification in sequence {","            status = notification.userInfo[\"status\"] as? String","        }","    }"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Elsewhere, the server defines a custom "},{"code":"didUpdateStatus","type":"codeVoice"},{"type":"text","text":" notification:"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["extension NSNotification.Name {","    static var didUpdateStatus: NSNotification.Name {","        NSNotification.Name(\"didUpdateStatus\")","    }","}"]},{"inlineContent":[{"text":"The server then posts a notification of this type whenever its status","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"changes, like after the user signs in:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let notification = Notification(","    name: .didUpdateStatus,","    object: self,","    userInfo: [\"status\": \"Signed In\"])","NotificationCenter.default.post(notification)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The task attached to the "},{"type":"codeVoice","code":"Text"},{"text":" view gets and displays the status","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value from the notification’s user information dictionary. When the user"},{"type":"text","text":" "},{"type":"text","text":"chooses a different server, SwiftUI cancels the task and creates a new"},{"text":" ","type":"text"},{"type":"text","text":"one, which then starts waiting for notifications from the new server."}]}]}],"references":{"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport":{"title":"Backport","role":"symbol","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Backport"}],"url":"\/documentation\/swiftuibackports\/backport","navigatorTitle":[{"kind":"identifier","text":"Backport"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Provides a convenient method for backporting API,"},{"text":" ","type":"text"},{"text":"including types, functions, properties, property wrappers and more.","type":"text"}]},"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport/task(id:priority:_:)":{"identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/task(id:priority:_:)","deprecated":true,"url":"\/documentation\/swiftuibackports\/backport\/task(id:priority:_:)","title":"task(id:priority:_:)","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Wrapped","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"text":".","type":"text"}]},"role":"symbol","abstract":[{"text":"Adds a task to perform when this view appears or when a specified","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value changes."}],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"task"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE4task2id8priority_Qrqd___ScPyyYaYbctSQRd__lFQO1Tqd__mfp","kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"text":"priority","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:ScP","text":"TaskPriority","kind":"typeIdentifier"},{"kind":"text","text":", () "},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"View","preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier"}]},"doc://SwiftUIBackports/documentation/SwiftUIBackports":{"abstract":[{"text":"Introducing a collection of SwiftUI backports to make your iOS development easier.","type":"text"}],"role":"collection","type":"topic","url":"\/documentation\/swiftuibackports","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","kind":"symbol","title":"SwiftUIBackports"}}}