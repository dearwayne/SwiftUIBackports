{"abstract":[{"type":"text","text":"Adds an asynchronous task to perform when this view appears."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@"},{"preciseIdentifier":"s:7SwiftUI11ViewBuilderV","text":"ViewBuilder","kind":"attribute"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"task","kind":"identifier"},{"kind":"text","text":"("},{"text":"priority","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"text":" = .userInitiated, ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"action"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"attribute"},{"text":" () ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"},{"text":"\n","kind":"text"}],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"priority","content":[{"inlineContent":[{"type":"text","text":"The task priority to use when creating the asynchronous"},{"type":"text","text":" "},{"type":"text","text":"task. The default priority is "},{"type":"codeVoice","code":".userInitiated"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"A closure that SwiftUI calls as an asynchronous task","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when the view appears. SwiftUI automatically cancels the task"},{"type":"text","text":" "},{"type":"text","text":"if the view disappears before the action completes."}],"type":"paragraph"}],"name":"action"}]},{"kind":"content","content":[{"level":2,"anchor":"return-value","text":"Return Value","type":"heading"},{"inlineContent":[{"text":"A view that runs the specified action asynchronously when","type":"text"},{"type":"text","text":" "},{"text":"the view appears.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"Use this modifier to perform an asynchronous task with a lifetime that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"matches that of the modified view. If the task doesnâ€™t finish"},{"text":" ","type":"text"},{"type":"text","text":"before SwiftUI removes the view or the view changes identity, SwiftUI"},{"type":"text","text":" "},{"type":"text","text":"cancels the task."}]},{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"code":"await","type":"codeVoice"},{"text":" keyword inside the task to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"wait for an asynchronous call to complete."}]},{"code":["let url = URL(string: \"https:\/\/example.com\")!","@State private var message = \"Loading...\"","","var body: some View {","    Text(message)","        .task {","            do {","                var receivedLines = [String]()","                for try await line in url.lines {","                    receivedLines.append(line)","                    message = \"Received \\(receivedLines.count) lines\"","                }","            } catch {","                message = \"Failed to load\"","            }","        }","}"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"When each new line arrives, the body of the ","type":"text"},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"code":"await","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" "},{"type":"text","text":"loop stores the line in an array of strings and updates the content of the"},{"type":"text","text":" "},{"text":"text view to report the latest line count.","type":"text"}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/task(priority:_:)","interfaceLanguage":"swift"},"sections":[],"kind":"symbol","variants":[{"paths":["\/documentation\/swiftuibackports\/backport\/task(priority:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport"]]},"metadata":{"extendedModule":"SwiftBackports","symbolKind":"method","title":"task(priority:_:)","roleHeading":"Instance Method","role":"symbol","platforms":[],"modules":[{"name":"SwiftUIBackports","relatedModules":["SwiftBackports"]}],"externalID":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE4task8priority_QrScP_yyYaYbctF","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"code":"View","type":"codeVoice"},{"type":"text","text":"."}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"task","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"text":": ","kind":"text"},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"text":", () ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"}]},"references":{"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport/task(priority:_:)":{"abstract":[{"type":"text","text":"Adds an asynchronous task to perform when this view appears."}],"title":"task(priority:_:)","role":"symbol","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/task(priority:_:)","kind":"symbol","url":"\/documentation\/swiftuibackports\/backport\/task(priority:_:)","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Wrapped"},{"text":" conforms to ","type":"text"},{"code":"View","type":"codeVoice"},{"text":".","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"task"},{"kind":"text","text":"("},{"text":"priority","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ScP","text":"TaskPriority"},{"text":", () ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"text":"View","preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier"}],"type":"topic","deprecated":true},"doc://SwiftUIBackports/documentation/SwiftUIBackports":{"abstract":[{"text":"Introducing a collection of SwiftUI backports to make your iOS development easier.","type":"text"}],"role":"collection","type":"topic","url":"\/documentation\/swiftuibackports","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","kind":"symbol","title":"SwiftUIBackports"},"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport":{"title":"Backport","role":"symbol","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Backport"}],"url":"\/documentation\/swiftuibackports\/backport","navigatorTitle":[{"kind":"identifier","text":"Backport"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Provides a convenient method for backporting API,"},{"text":" ","type":"text"},{"text":"including types, functions, properties, property wrappers and more.","type":"text"}]}}}