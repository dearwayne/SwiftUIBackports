{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/interactiveDismissDisabled(_:)","interfaceLanguage":"swift"},"sections":[],"variants":[{"paths":["\/documentation\/swiftuibackports\/backport\/interactivedismissdisabled(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"symbolKind":"method","conformance":{"constraints":[{"type":"codeVoice","code":"Wrapped"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"View"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"title":"interactiveDismissDisabled(_:)","roleHeading":"Instance Method","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"interactiveDismissDisabled","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"}],"externalID":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE26interactiveDismissDisabledyQrSbF","modules":[{"relatedModules":["SwiftBackports"],"name":"SwiftUIBackports"}],"extendedModule":"SwiftBackports","platforms":[]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@"},{"text":"ViewBuilder","kind":"attribute","preciseIdentifier":"s:7SwiftUI11ViewBuilderV"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"interactiveDismissDisabled","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"isDisabled","kind":"internalParam"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":" = true) -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"},{"kind":"text","text":"\n"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"isDisabled","content":[{"inlineContent":[{"type":"text","text":"A Boolean value that indicates whether to"},{"type":"text","text":" "},{"type":"text","text":"prevent nonprogrammatic dismissal of the containing view hierarchy"},{"type":"text","text":" "},{"type":"text","text":"when presented in a sheet or popover."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"text":"Users can dismiss certain kinds of presentations using built-in","type":"text"},{"text":" ","type":"text"},{"text":"gestures. In particular, a user can dismiss a sheet by dragging it down,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or a popover by clicking or tapping outside of the presented view. Use"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"interactiveDismissDisabled(_:)","type":"codeVoice"},{"text":" modifier to conditionally prevent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"this kind of dismissal. You typically do this to prevent the user from"},{"type":"text","text":" "},{"type":"text","text":"dismissing a presentation before providing needed data or completing"},{"type":"text","text":" "},{"text":"a required action.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, suppose you have a view that displays a licensing"},{"text":" ","type":"text"},{"text":"agreement that the user must acknowledge before continuing:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["struct TermsOfService: View {","    @Binding var areTermsAccepted: Bool","    @Environment(\\.backportDismiss) private var dismiss","","    var body: some View {","        Form {","            Text(\"License Agreement\")","                .font(.title)","            Text(\"Terms and conditions go here.\")","            Button(\"Accept\") {","                areTermsAccepted = true","                dismiss()","            }","        }","    }","}"]},{"inlineContent":[{"text":"If you present this view in a sheet, the user can dismiss it by either","type":"text"},{"text":" ","type":"text"},{"text":"tapping the button — which calls ","type":"text"},{"type":"codeVoice","code":"EnvironmentValues\/backportDismiss"},{"text":" ","type":"text"},{"type":"text","text":"from its "},{"type":"codeVoice","code":"action"},{"text":" closure — or by dragging the sheet down. To","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ensure that the user accepts the terms by tapping the button,"},{"type":"text","text":" "},{"type":"text","text":"disable interactive dismissal, conditioned on the "},{"code":"areTermsAccepted","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"property:"}],"type":"paragraph"},{"type":"codeListing","code":["struct ContentView: View {","    @State private var isSheetPresented = false","    @State private var areTermsAccepted = false","","    var body: some View {","        Button(\"Use Service\") {","            isSheetPresented = true","        }","        .sheet(isPresented: $isSheetPresented) {","            TermsOfService()","                .backport.interactiveDismissDisabled(!areTermsAccepted)","        }","    }","}"],"syntax":null},{"inlineContent":[{"type":"text","text":"You can apply the modifier to any view in the sheet’s view hierarchy,"},{"text":" ","type":"text"},{"type":"text","text":"including to the sheet’s top level view, as the example demonstrates,"},{"text":" ","type":"text"},{"text":"or to any child view, like the ","type":"text"},{"type":"codeVoice","code":"Form"},{"type":"text","text":" or the Accept "},{"type":"codeVoice","code":"Button"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The modifier has no effect on programmatic dismissal, which you can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"invoke by updating the "},{"type":"codeVoice","code":"Binding"},{"text":" that controls the presentation, or","type":"text"},{"text":" ","type":"text"},{"text":"by calling the environment’s ","type":"text"},{"type":"codeVoice","code":"EnvironmentValues\/backportDismiss"},{"type":"text","text":" action."}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"This modifier currently has no effect on macOS, tvOS or watchOS.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside","style":"note"}]}],"abstract":[{"type":"text","text":"Conditionally prevents interactive dismissal of a popover or a sheet."}],"references":{"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport/interactiveDismissDisabled(_:)":{"deprecated":true,"title":"interactiveDismissDisabled(_:)","abstract":[{"type":"text","text":"Conditionally prevents interactive dismissal of a popover or a sheet."}],"url":"\/documentation\/swiftuibackports\/backport\/interactivedismissdisabled(_:)","type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"code":"View","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol","kind":"symbol","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/interactiveDismissDisabled(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"interactiveDismissDisabled"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP","text":"View"}]},"doc://SwiftUIBackports/documentation/SwiftUIBackports":{"type":"topic","kind":"symbol","role":"collection","title":"SwiftUIBackports","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","abstract":[],"url":"\/documentation\/swiftuibackports"},"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport":{"navigatorTitle":[{"text":"Backport","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/swiftuibackports\/backport","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Backport"}],"abstract":[{"type":"text","text":"Provides a convenient method for backporting API,"},{"text":" ","type":"text"},{"type":"text","text":"including types, functions, properties, property wrappers and more."}],"kind":"symbol","title":"Backport","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport"}}}