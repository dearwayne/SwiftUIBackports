{"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"attribute","text":"@"},{"kind":"attribute","preciseIdentifier":"s:7SwiftUI11ViewBuilderV","text":"ViewBuilder"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"interactiveDismissDisabled"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"isDisabled","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":" = true, ","kind":"text"},{"kind":"externalParam","text":"onAttempt"},{"kind":"text","text":": "},{"text":"@escaping","kind":"attribute"},{"text":" () -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"},{"text":"\n","kind":"text"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"A Boolean value that indicates whether to"},{"text":" ","type":"text"},{"type":"text","text":"prevent nonprogrammatic dismissal of the containing view hierarchy"},{"type":"text","text":" "},{"type":"text","text":"when presented in a sheet or popover."}],"type":"paragraph"}],"name":"isDisabled"},{"name":"onAttempt","content":[{"type":"paragraph","inlineContent":[{"text":"A closure that will be called when an interactive dismiss attempt occurs.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can use this as an opportunity to present an confirmation or prompt to the user."}]}]}]},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Users can dismiss certain kinds of presentations using built-in"},{"type":"text","text":" "},{"text":"gestures. In particular, a user can dismiss a sheet by dragging it down,","type":"text"},{"text":" ","type":"text"},{"text":"or a popover by clicking or tapping outside of the presented view. Use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"interactiveDismissDisabled(_:)","type":"codeVoice"},{"text":" modifier to conditionally prevent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"this kind of dismissal. You typically do this to prevent the user from"},{"type":"text","text":" "},{"text":"dismissing a presentation before providing needed data or completing","type":"text"},{"type":"text","text":" "},{"text":"a required action.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For instance, suppose you have a view that displays a licensing","type":"text"},{"text":" ","type":"text"},{"text":"agreement that the user must acknowledge before continuing:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["struct TermsOfService: View {","    @Binding var areTermsAccepted: Bool","    @Environment(\\.backportDismiss) private var dismiss","","    var body: some View {","        Form {","            Text(\"License Agreement\")","                .font(.title)","            Text(\"Terms and conditions go here.\")","            Button(\"Accept\") {","                areTermsAccepted = true","                dismiss()","            }","        }","    }","}"]},{"inlineContent":[{"text":"If you present this view in a sheet, the user can dismiss it by either","type":"text"},{"type":"text","text":" "},{"type":"text","text":"tapping the button — which calls "},{"type":"codeVoice","code":"EnvironmentValues\/backportDismiss"},{"text":" ","type":"text"},{"text":"from its ","type":"text"},{"code":"action","type":"codeVoice"},{"type":"text","text":" closure — or by dragging the sheet down. To"},{"type":"text","text":" "},{"type":"text","text":"ensure that the user accepts the terms by tapping the button,"},{"text":" ","type":"text"},{"type":"text","text":"disable interactive dismissal, conditioned on the "},{"code":"areTermsAccepted","type":"codeVoice"},{"type":"text","text":" "},{"text":"property:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["struct ContentView: View {","    @State private var isSheetPresented = false","    @State private var areTermsAccepted = false","","    var body: some View {","        Button(\"Use Service\") {","            isSheetPresented = true","        }","        .sheet(isPresented: $isSheetPresented) {","            TermsOfService()","                .backport.interactiveDismissDisabled(!areTermsAccepted)","        }","    }","}"]},{"inlineContent":[{"text":"You can apply the modifier to any view in the sheet’s view hierarchy,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"including to the sheet’s top level view, as the example demonstrates,"},{"type":"text","text":" "},{"text":"or to any child view, like the ","type":"text"},{"code":"Form","type":"codeVoice"},{"text":" or the Accept ","type":"text"},{"type":"codeVoice","code":"Button"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The modifier has no effect on programmatic dismissal, which you can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"invoke by updating the "},{"code":"Binding","type":"codeVoice"},{"type":"text","text":" that controls the presentation, or"},{"type":"text","text":" "},{"type":"text","text":"by calling the environment’s "},{"code":"EnvironmentValues\/backportDismiss","type":"codeVoice"},{"text":" action.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"This modifier currently has no effect on macOS, tvOS or watchOS.","type":"text"}]}],"type":"aside","style":"note","name":"Note"}],"kind":"content"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"symbol","metadata":{"modules":[{"name":"SwiftUIBackports","relatedModules":["SwiftBackports"]}],"symbolKind":"method","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Wrapped","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"View","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"interactiveDismissDisabled"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"onAttempt","kind":"externalParam"},{"kind":"text","text":": () -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"}],"extendedModule":"SwiftBackports","title":"interactiveDismissDisabled(_:onAttempt:)","externalID":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE26interactiveDismissDisabled_9onAttemptQrSb_yyctF","roleHeading":"Instance Method","role":"symbol"},"abstract":[{"type":"text","text":"Conditionally prevents interactive dismissal of a popover or a sheet. In addition, provides fine-grained control over the dismissal"}],"hierarchy":{"paths":[["doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport"]]},"sections":[],"identifier":{"url":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/interactiveDismissDisabled(_:onAttempt:)","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/swiftuibackports\/backport\/interactivedismissdisabled(_:onattempt:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport/interactiveDismissDisabled(_:onAttempt:)":{"role":"symbol","type":"topic","kind":"symbol","url":"\/documentation\/swiftuibackports\/backport\/interactivedismissdisabled(_:onattempt:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"interactiveDismissDisabled"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"onAttempt","kind":"externalParam"},{"kind":"text","text":": () -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier","text":"View"}],"abstract":[{"text":"Conditionally prevents interactive dismissal of a popover or a sheet. In addition, provides fine-grained control over the dismissal","type":"text"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Wrapped","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/interactiveDismissDisabled(_:onAttempt:)","title":"interactiveDismissDisabled(_:onAttempt:)"},"doc://SwiftUIBackports/documentation/SwiftUIBackports":{"abstract":[{"text":"Introducing a collection of SwiftUI backports to make your iOS development easier.","type":"text"}],"role":"collection","type":"topic","url":"\/documentation\/swiftuibackports","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","kind":"symbol","title":"SwiftUIBackports"},"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport":{"title":"Backport","role":"symbol","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Backport"}],"url":"\/documentation\/swiftuibackports\/backport","navigatorTitle":[{"kind":"identifier","text":"Backport"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Provides a convenient method for backporting API,"},{"text":" ","type":"text"},{"text":"including types, functions, properties, property wrappers and more.","type":"text"}]}}}