{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftuibackports\/backport\/overlay(alignment:_:)"]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"overlay"},{"kind":"text","text":"<"},{"text":"Content","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"alignment"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI9AlignmentV","text":"Alignment","kind":"typeIdentifier"},{"text":" = .center, ","kind":"text"},{"kind":"attribute","text":"@"},{"preciseIdentifier":"s:7SwiftUI11ViewBuilderV","text":"ViewBuilder","kind":"attribute"},{"text":" ","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"content","kind":"internalParam"},{"kind":"text","text":": () -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE7overlay9alignment_QrAE9AlignmentV_qd__yXEtAeFRd__lFQO7Contentqd__mfp","text":"Content"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"View","preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Content"},{"text":" : ","kind":"text"},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"},{"kind":"text","text":"\n"}]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The alignment that the modifier uses to position the"},{"type":"text","text":" "},{"text":"implicit ","type":"text"},{"type":"codeVoice","code":"ZStack"},{"type":"text","text":" that groups the foreground views. The default"},{"type":"text","text":" "},{"type":"text","text":"is "},{"type":"codeVoice","code":"Alignment\/center"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"alignment"},{"name":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"ViewBuilder","type":"codeVoice"},{"type":"text","text":" that you use to declare the views to"},{"type":"text","text":" "},{"text":"draw in front of this view, stacked in the order that you list them.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The last view that you list appears at the front of the stack."}]}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A view that uses the specified content as a foreground."}]}]},{"content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"inlineContent":[{"text":"Use this modifier to place one or more views in front of another view.","type":"text"},{"type":"text","text":" "},{"text":"For example, you can place a group of stars on a ","type":"text"},{"type":"codeVoice","code":"RoundedRectangle"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["RoundedRectangle(cornerRadius: 8)","    .frame(width: 200, height: 100)","    .overlay(alignment: .topLeading) { Star(color: .red) }","    .overlay(alignment: .topTrailing) { Star(color: .yellow) }","    .overlay(alignment: .bottomLeading) { Star(color: .green) }","    .overlay(alignment: .bottomTrailing) { Star(color: .blue) }"]},{"inlineContent":[{"type":"text","text":"The example above assumes that you’ve defined a "},{"code":"Star","type":"codeVoice"},{"text":" view with a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parameterized color:"}],"type":"paragraph"},{"code":["struct Star: View {","    var color = Color.yellow","","    var body: some View {","        Image(systemName: \"star.fill\")","            .foregroundStyle(color)","    }","}"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"By setting different "},{"type":"codeVoice","code":"alignment"},{"text":" values for each modifier, you make the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"stars appear in different places on the rectangle:"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you specify more than one view in the "},{"code":"content","type":"codeVoice"},{"type":"text","text":" closure, the modifier"},{"text":" ","type":"text"},{"text":"collects all of the views in the closure into an implicit ","type":"text"},{"type":"codeVoice","code":"ZStack"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"taking them in order from back to front. For example, you can place a","type":"text"},{"type":"text","text":" "},{"text":"star and a ","type":"text"},{"type":"codeVoice","code":"Circle"},{"type":"text","text":" on a field of "},{"type":"codeVoice","code":"ShapeStyle\/blue"},{"type":"text","text":":"}]},{"code":["Color.blue","    .frame(width: 200, height: 200)","    .overlay {","        Circle()","            .frame(width: 100, height: 100)","        Star()","    }"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Both the overlay modifier and the implicit ","type":"text"},{"type":"codeVoice","code":"ZStack"},{"type":"text","text":" composed from the"},{"type":"text","text":" "},{"text":"overlay content — the circle and the star — use a default","type":"text"},{"type":"text","text":" "},{"code":"Alignment\/center","type":"codeVoice"},{"text":" alignment. The star appears centered on the circle,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and both appear as a composite view centered in front of the square:"}]},{"inlineContent":[],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you specify an alignment for the overlay, it applies to the implicit"},{"type":"text","text":" "},{"type":"text","text":"stack rather than to the individual views in the closure. You can see"},{"text":" ","type":"text"},{"text":"this if you add the ","type":"text"},{"code":"Alignment\/bottom","type":"codeVoice"},{"type":"text","text":" alignment:"}]},{"type":"codeListing","code":["Color.blue","    .frame(width: 200, height: 200)","    .overlay(alignment: .bottom) {","        Circle()","            .frame(width: 100, height: 100)","        Star()","    }"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The circle and the star move down as a unit to align the stack’s bottom"},{"text":" ","type":"text"},{"type":"text","text":"edge with the bottom edge of the square, while the star remains"},{"type":"text","text":" "},{"type":"text","text":"centered on the circle:"}]},{"inlineContent":[],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To control the placement of individual items inside the "},{"code":"content","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"closure, either use a different overlay modifier for each item, as the"},{"type":"text","text":" "},{"type":"text","text":"earlier example of stars in the corners of a rectangle demonstrates, or"},{"type":"text","text":" "},{"text":"add an explicit ","type":"text"},{"type":"codeVoice","code":"ZStack"},{"text":" inside the content closure with its own","type":"text"},{"type":"text","text":" "},{"text":"alignment:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["Color.blue","    .frame(width: 200, height: 200)","    .overlay(alignment: .bottom) {","        ZStack(alignment: .bottom) {","            Circle()","                .frame(width: 100, height: 100)","            Star()","        }","    }"]},{"type":"paragraph","inlineContent":[{"text":"The stack alignment ensures that the star’s bottom edge aligns with the","type":"text"},{"type":"text","text":" "},{"text":"circle’s, while the overlay aligns the composite view with the square:","type":"text"}]},{"type":"paragraph","inlineContent":[]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can achieve layering without an overlay modifier by putting both the"},{"type":"text","text":" "},{"type":"text","text":"modified view and the overlay content into a "},{"type":"codeVoice","code":"ZStack"},{"type":"text","text":". This can"},{"type":"text","text":" "},{"text":"produce a simpler view hierarchy, but changes the layout priority that","type":"text"},{"type":"text","text":" "},{"text":"SwiftUI applies to the views. Use the overlay modifier when you want the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"modified view to dominate the layout."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to specify a "},{"code":"ShapeStyle","type":"codeVoice"},{"text":" like a ","type":"text"},{"type":"codeVoice","code":"Color"},{"type":"text","text":" or a"},{"text":" ","type":"text"},{"code":"Material","type":"codeVoice"},{"text":" as the overlay, use","type":"text"},{"type":"text","text":" "},{"code":"View\/overlay(_:ignoresSafeAreaEdges:)","type":"codeVoice"},{"type":"text","text":" instead. To specify a"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Shape"},{"type":"text","text":", use "},{"code":"View\/overlay(_:in:fillStyle:)","type":"codeVoice"},{"text":".","type":"text"}]}],"kind":"content"}],"metadata":{"roleHeading":"Instance Method","symbolKind":"method","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Wrapped","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"title":"overlay(alignment:_:)","extendedModule":"SwiftBackports","role":"symbol","externalID":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE7overlay9alignment_QrAE9AlignmentV_qd__yXEtAeFRd__lF","modules":[{"relatedModules":["SwiftBackports"],"name":"SwiftUIBackports"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"overlay"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Content"},{"text":">(","kind":"text"},{"text":"alignment","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Alignment","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI9AlignmentV"},{"kind":"text","text":", () -> "},{"text":"Content","preciseIdentifier":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE7overlay9alignment_QrAE9AlignmentV_qd__yXEtAeFRd__lFQO7Contentqd__mfp","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"View","preciseIdentifier":"s:7SwiftUI4ViewP"}]},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/overlay(alignment:_:)"},"abstract":[{"type":"text","text":"Layers the views that you specify in front of this view."}],"references":{"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport/overlay(alignment:_:)":{"kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Wrapped"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"View"},{"text":".","type":"text"}]},"title":"overlay(alignment:_:)","abstract":[{"type":"text","text":"Layers the views that you specify in front of this view."}],"url":"\/documentation\/swiftuibackports\/backport\/overlay(alignment:_:)","type":"topic","role":"symbol","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/overlay(alignment:_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"overlay"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Content"},{"text":">(","kind":"text"},{"text":"alignment","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Alignment","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI9AlignmentV"},{"kind":"text","text":", () -> "},{"kind":"typeIdentifier","text":"Content","preciseIdentifier":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE7overlay9alignment_QrAE9AlignmentV_qd__yXEtAeFRd__lFQO7Contentqd__mfp"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"}]},"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport":{"title":"Backport","role":"symbol","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Backport"}],"url":"\/documentation\/swiftuibackports\/backport","navigatorTitle":[{"kind":"identifier","text":"Backport"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Provides a convenient method for backporting API,"},{"text":" ","type":"text"},{"text":"including types, functions, properties, property wrappers and more.","type":"text"}]},"doc://SwiftUIBackports/documentation/SwiftUIBackports":{"abstract":[{"text":"Introducing a collection of SwiftUI backports to make your iOS development easier.","type":"text"}],"role":"collection","type":"topic","url":"\/documentation\/swiftuibackports","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","kind":"symbol","title":"SwiftUIBackports"}}}