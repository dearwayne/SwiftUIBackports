{"schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftuibackports\/backport\/overlay(alignment:_:)"]}],"abstract":[{"text":"Layers the views that you specify in front of this view.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport"]]},"metadata":{"symbolKind":"method","extendedModule":"SwiftBackports","role":"symbol","externalID":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE7overlay9alignment_QrAE9AlignmentV_qd__yXEtAeFRd__lF","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Wrapped","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"modules":[{"relatedModules":["SwiftBackports"],"name":"SwiftUIBackports"}],"title":"overlay(alignment:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"overlay"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Content"},{"text":">(","kind":"text"},{"text":"alignment","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI9AlignmentV","text":"Alignment","kind":"typeIdentifier"},{"text":", () -> ","kind":"text"},{"preciseIdentifier":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE7overlay9alignment_QrAE9AlignmentV_qd__yXEtAeFRd__lFQO7Contentqd__mfp","text":"Content","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier","text":"View"}],"roleHeading":"Instance Method"},"identifier":{"url":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/overlay(alignment:_:)","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"overlay"},{"text":"<","kind":"text"},{"text":"Content","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"alignment"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Alignment","preciseIdentifier":"s:7SwiftUI9AlignmentV"},{"kind":"text","text":" = .center, "},{"text":"@","kind":"attribute"},{"kind":"attribute","preciseIdentifier":"s:7SwiftUI11ViewBuilderV","text":"ViewBuilder"},{"kind":"text","text":" "},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"content","kind":"internalParam"},{"text":": () -> ","kind":"text"},{"text":"Content","preciseIdentifier":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE7overlay9alignment_QrAE9AlignmentV_qd__yXEtAeFRd__lFQO7Contentqd__mfp","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP","text":"View"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Content","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier","text":"View"},{"text":"\n","kind":"text"}]}]},{"kind":"parameters","parameters":[{"name":"alignment","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The alignment that the modifier uses to position the"},{"type":"text","text":" "},{"type":"text","text":"implicit "},{"code":"ZStack","type":"codeVoice"},{"text":" that groups the foreground views. The default","type":"text"},{"type":"text","text":" "},{"text":"is ","type":"text"},{"type":"codeVoice","code":"Alignment\/center"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"ViewBuilder","type":"codeVoice"},{"type":"text","text":" that you use to declare the views to"},{"text":" ","type":"text"},{"type":"text","text":"draw in front of this view, stacked in the order that you list them."},{"type":"text","text":" "},{"type":"text","text":"The last view that you list appears at the front of the stack."}]}],"name":"content"}]},{"kind":"content","content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A view that uses the specified content as a foreground."}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"inlineContent":[{"type":"text","text":"Use this modifier to place one or more views in front of another view."},{"type":"text","text":" "},{"type":"text","text":"For example, you can place a group of stars on a "},{"code":"RoundedRectangle","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["RoundedRectangle(cornerRadius: 8)","    .frame(width: 200, height: 100)","    .overlay(alignment: .topLeading) { Star(color: .red) }","    .overlay(alignment: .topTrailing) { Star(color: .yellow) }","    .overlay(alignment: .bottomLeading) { Star(color: .green) }","    .overlay(alignment: .bottomTrailing) { Star(color: .blue) }"]},{"inlineContent":[{"type":"text","text":"The example above assumes that you’ve defined a "},{"code":"Star","type":"codeVoice"},{"text":" view with a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parameterized color:"}],"type":"paragraph"},{"syntax":null,"code":["struct Star: View {","    var color = Color.yellow","","    var body: some View {","        Image(systemName: \"star.fill\")","            .foregroundStyle(color)","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"By setting different "},{"type":"codeVoice","code":"alignment"},{"type":"text","text":" values for each modifier, you make the"},{"type":"text","text":" "},{"text":"stars appear in different places on the rectangle:","type":"text"}],"type":"paragraph"},{"inlineContent":[],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you specify more than one view in the "},{"code":"content","type":"codeVoice"},{"type":"text","text":" closure, the modifier"},{"text":" ","type":"text"},{"text":"collects all of the views in the closure into an implicit ","type":"text"},{"code":"ZStack","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"taking them in order from back to front. For example, you can place a"},{"type":"text","text":" "},{"type":"text","text":"star and a "},{"code":"Circle","type":"codeVoice"},{"text":" on a field of ","type":"text"},{"code":"ShapeStyle\/blue","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":null,"code":["Color.blue","    .frame(width: 200, height: 200)","    .overlay {","        Circle()","            .frame(width: 100, height: 100)","        Star()","    }"]},{"type":"paragraph","inlineContent":[{"text":"Both the overlay modifier and the implicit ","type":"text"},{"type":"codeVoice","code":"ZStack"},{"text":" composed from the","type":"text"},{"type":"text","text":" "},{"text":"overlay content — the circle and the star — use a default","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Alignment\/center"},{"text":" alignment. The star appears centered on the circle,","type":"text"},{"type":"text","text":" "},{"text":"and both appear as a composite view centered in front of the square:","type":"text"}]},{"type":"paragraph","inlineContent":[]},{"inlineContent":[{"text":"If you specify an alignment for the overlay, it applies to the implicit","type":"text"},{"type":"text","text":" "},{"type":"text","text":"stack rather than to the individual views in the closure. You can see"},{"type":"text","text":" "},{"text":"this if you add the ","type":"text"},{"code":"Alignment\/bottom","type":"codeVoice"},{"text":" alignment:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["Color.blue","    .frame(width: 200, height: 200)","    .overlay(alignment: .bottom) {","        Circle()","            .frame(width: 100, height: 100)","        Star()","    }"]},{"inlineContent":[{"type":"text","text":"The circle and the star move down as a unit to align the stack’s bottom"},{"type":"text","text":" "},{"type":"text","text":"edge with the bottom edge of the square, while the star remains"},{"type":"text","text":" "},{"text":"centered on the circle:","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[]},{"inlineContent":[{"type":"text","text":"To control the placement of individual items inside the "},{"code":"content","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"closure, either use a different overlay modifier for each item, as the"},{"type":"text","text":" "},{"type":"text","text":"earlier example of stars in the corners of a rectangle demonstrates, or"},{"text":" ","type":"text"},{"text":"add an explicit ","type":"text"},{"type":"codeVoice","code":"ZStack"},{"text":" inside the content closure with its own","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"alignment:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["Color.blue","    .frame(width: 200, height: 200)","    .overlay(alignment: .bottom) {","        ZStack(alignment: .bottom) {","            Circle()","                .frame(width: 100, height: 100)","            Star()","        }","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The stack alignment ensures that the star’s bottom edge aligns with the"},{"text":" ","type":"text"},{"type":"text","text":"circle’s, while the overlay aligns the composite view with the square:"}]},{"type":"paragraph","inlineContent":[]},{"inlineContent":[{"text":"You can achieve layering without an overlay modifier by putting both the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"modified view and the overlay content into a "},{"type":"codeVoice","code":"ZStack"},{"type":"text","text":". This can"},{"type":"text","text":" "},{"type":"text","text":"produce a simpler view hierarchy, but changes the layout priority that"},{"text":" ","type":"text"},{"text":"SwiftUI applies to the views. Use the overlay modifier when you want the","type":"text"},{"text":" ","type":"text"},{"text":"modified view to dominate the layout.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to specify a "},{"type":"codeVoice","code":"ShapeStyle"},{"type":"text","text":" like a "},{"type":"codeVoice","code":"Color"},{"type":"text","text":" or a"},{"text":" ","type":"text"},{"code":"Material","type":"codeVoice"},{"type":"text","text":" as the overlay, use"},{"type":"text","text":" "},{"type":"codeVoice","code":"View\/overlay(_:ignoresSafeAreaEdges:)"},{"type":"text","text":" instead. To specify a"},{"text":" ","type":"text"},{"code":"Shape","type":"codeVoice"},{"type":"text","text":", use "},{"type":"codeVoice","code":"View\/overlay(_:in:fillStyle:)"},{"type":"text","text":"."}]}]}],"sections":[],"kind":"symbol","references":{"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport/overlay(alignment:_:)":{"title":"overlay(alignment:_:)","abstract":[{"text":"Layers the views that you specify in front of this view.","type":"text"}],"identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/overlay(alignment:_:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"overlay","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Content"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"alignment"},{"text":": ","kind":"text"},{"text":"Alignment","preciseIdentifier":"s:7SwiftUI9AlignmentV","kind":"typeIdentifier"},{"text":", () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Content","preciseIdentifier":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE7overlay9alignment_QrAE9AlignmentV_qd__yXEtAeFRd__lFQO7Contentqd__mfp"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:7SwiftUI4ViewP","text":"View","kind":"typeIdentifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"code":"View","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","url":"\/documentation\/swiftuibackports\/backport\/overlay(alignment:_:)"},"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport":{"navigatorTitle":[{"text":"Backport","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/swiftuibackports\/backport","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Backport"}],"abstract":[{"type":"text","text":"Provides a convenient method for backporting API,"},{"text":" ","type":"text"},{"type":"text","text":"including types, functions, properties, property wrappers and more."}],"kind":"symbol","title":"Backport","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport"},"doc://SwiftUIBackports/documentation/SwiftUIBackports":{"type":"topic","kind":"symbol","role":"collection","title":"SwiftUIBackports","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","abstract":[],"url":"\/documentation\/swiftuibackports"}}}