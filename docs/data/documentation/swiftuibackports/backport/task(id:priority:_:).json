{"kind":"symbol","sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@"},{"kind":"attribute","preciseIdentifier":"s:7SwiftUI11ViewBuilderV","text":"ViewBuilder"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"task","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"id","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE4task2id8priority_Qrqd___ScPyyYaYbctSQRd__lFQO1Tqd__mfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"priority"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"text":" = .userInitiated, ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"action","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"attribute"},{"kind":"text","text":" () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:7SwiftUI4ViewP","text":"View","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":" : "},{"text":"Equatable","kind":"typeIdentifier","preciseIdentifier":"s:SQ"},{"text":"\n","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value to observe for changes. The value must conform"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" protocol."}]}],"name":"id"},{"name":"priority","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The task priority to use when creating the asynchronous"},{"type":"text","text":" "},{"text":"task. The default priority is ","type":"text"},{"code":".userInitiated","type":"codeVoice"}]}]},{"name":"action","content":[{"inlineContent":[{"text":"A closure that SwiftUI calls as an asynchronous task","type":"text"},{"text":" ","type":"text"},{"text":"when the view appears. SwiftUI automatically cancels the task","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if the view disappears before the action completes. If the"},{"type":"text","text":" "},{"code":"id","type":"codeVoice"},{"type":"text","text":" value changes, SwiftUI cancels and restarts the task."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"inlineContent":[{"type":"text","text":"A view that runs the specified action asynchronously when"},{"type":"text","text":" "},{"type":"text","text":"the view appears, or restarts the task with the "},{"type":"codeVoice","code":"id"},{"text":" value changes.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method behaves like "},{"type":"codeVoice","code":"View\/task(priority:_:)"},{"type":"text","text":", except that it also"},{"text":" ","type":"text"},{"type":"text","text":"cancels and recreates the task when a specified value changes. To detect"},{"type":"text","text":" "},{"type":"text","text":"a change, the modifier tests whether a new value for the "},{"code":"id","type":"codeVoice"},{"text":" parameter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"equals the previous value. For this to work,"},{"type":"text","text":" "},{"type":"text","text":"the value’s type must conform to the "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" protocol."}]},{"inlineContent":[{"type":"text","text":"For example, if you define an equatable "},{"type":"codeVoice","code":"Server"},{"text":" type that posts custom","type":"text"},{"type":"text","text":" "},{"text":"notifications whenever its state changes — for example, from ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"signed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"out"}]},{"type":"text","text":" to "},{"inlineContent":[{"text":"signed in","type":"text"}],"type":"emphasis"},{"text":" — you can use the task modifier to update","type":"text"},{"type":"text","text":" "},{"text":"the contents of a ","type":"text"},{"type":"codeVoice","code":"Text"},{"text":" view to reflect the state of the","type":"text"},{"text":" ","type":"text"},{"text":"currently selected server:","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["Text(status ?? \"Signed Out\")","    .task(id: server) {","        let sequence = NotificationCenter.default.notifications(","            named: .didChangeStatus,","            object: server)","        for try await notification in sequence {","            status = notification.userInfo[\"status\"] as? String","        }","    }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Elsewhere, the server defines a custom "},{"type":"codeVoice","code":"didUpdateStatus"},{"text":" notification:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["extension NSNotification.Name {","    static var didUpdateStatus: NSNotification.Name {","        NSNotification.Name(\"didUpdateStatus\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The server then posts a notification of this type whenever its status"},{"text":" ","type":"text"},{"type":"text","text":"changes, like after the user signs in:"}]},{"type":"codeListing","code":["let notification = Notification(","    name: .didUpdateStatus,","    object: self,","    userInfo: [\"status\": \"Signed In\"])","NotificationCenter.default.post(notification)"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"The task attached to the ","type":"text"},{"type":"codeVoice","code":"Text"},{"type":"text","text":" view gets and displays the status"},{"type":"text","text":" "},{"type":"text","text":"value from the notification’s user information dictionary. When the user"},{"text":" ","type":"text"},{"type":"text","text":"chooses a different server, SwiftUI cancels the task and creates a new"},{"text":" ","type":"text"},{"text":"one, which then starts waiting for notifications from the new server.","type":"text"}]}]}],"abstract":[{"type":"text","text":"Adds a task to perform when this view appears or when a specified"},{"type":"text","text":" "},{"type":"text","text":"value changes."}],"metadata":{"symbolKind":"method","modules":[{"relatedModules":["SwiftBackports"],"name":"SwiftUIBackports"}],"roleHeading":"Instance Method","extendedModule":"SwiftBackports","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"type":"text","text":"."}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"task","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"id","kind":"externalParam"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE4task2id8priority_Qrqd___ScPyyYaYbctSQRd__lFQO1Tqd__mfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"priority"},{"text":": ","kind":"text"},{"text":"TaskPriority","preciseIdentifier":"s:ScP","kind":"typeIdentifier"},{"text":", () ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier","text":"View"}],"externalID":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE4task2id8priority_Qrqd___ScPyyYaYbctSQRd__lF","platforms":[],"role":"symbol","title":"task(id:priority:_:)"},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/task(id:priority:_:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftuibackports\/backport\/task(id:priority:_:)"]}],"references":{"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport":{"navigatorTitle":[{"text":"Backport","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/swiftuibackports\/backport","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Backport"}],"abstract":[{"type":"text","text":"Provides a convenient method for backporting API,"},{"text":" ","type":"text"},{"type":"text","text":"including types, functions, properties, property wrappers and more."}],"kind":"symbol","title":"Backport","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport"},"doc://SwiftUIBackports/documentation/SwiftUIBackports":{"type":"topic","kind":"symbol","role":"collection","title":"SwiftUIBackports","identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports","abstract":[],"url":"\/documentation\/swiftuibackports"},"doc://SwiftUIBackports/documentation/SwiftUIBackports/Backport/task(id:priority:_:)":{"title":"task(id:priority:_:)","abstract":[{"text":"Adds a task to perform when this view appears or when a specified","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value changes."}],"identifier":"doc:\/\/SwiftUIBackports\/documentation\/SwiftUIBackports\/Backport\/task(id:priority:_:)","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"task","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14SwiftBackports8BackportV0A11UIBackports0A2UI4ViewRzlE4task2id8priority_Qrqd___ScPyyYaYbctSQRd__lFQO1Tqd__mfp","text":"T"},{"text":", ","kind":"text"},{"text":"priority","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"TaskPriority","preciseIdentifier":"s:ScP"},{"kind":"text","text":", () "},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier","text":"View"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Wrapped"},{"text":" conforms to ","type":"text"},{"code":"View","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","url":"\/documentation\/swiftuibackports\/backport\/task(id:priority:_:)","deprecated":true}}}